<?php

namespace Feedify\BaseBundle\Entity\Management;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * SchedulerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchedulerRepository extends EntityRepository
{
    /**
     * @param int $clientId
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getMaxStartDate($clientId)
    {
        return $this->createQueryBuilder('sr')
            ->select('MAX(sr.startDate as date')
            ->where('sr.clientId = :clientId')
            ->setParameter('clientId', $clientId)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * @param int $limit
     * @return array
     */
    public function getSchedulersForCron($limit)
    {
        $currentDate = new \DateTime();

        return $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.startDate < :data')
            ->andWhere('s.status = 0')
            ->setParameter('data', $currentDate->format('Y-m-d H:i:s'))
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return mixed
     */
    public function countScheduler()
    {
        return $this->createQueryBuilder('s')
            ->select('COUNT(s.id)')
            ->where('s.status = 0')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @return mixed
     */
    public function countSchedulerStatus()
    {
        $countByStatus = $this->createQueryBuilder('s')
            ->select('s.status, COUNT(s) as countStatus')
            ->groupBy('s.status')
            ->getQuery()
            ->getResult();

        $totalCount = $this->createQueryBuilder('s')
            ->select('COUNT(s.id)')
            ->getQuery()
            ->getSingleScalarResult();

        return [
            'countByStatus' => $countByStatus,
            'totalScheduler' => $totalCount,
        ];
    }

    /**
     * @param array $condition
     * @return mixed|UserInterface
     */
    public function getSchedulerInfoForUsers($condition)
    {
        $where = '1 = 1';
        $by = "DESC";
        if (isset($condition['search']) && $condition['search'] != "") {
            $search = trim($condition['search']);
            $where .= " AND u.clientId LIKE '%$search%' OR u.username LIKE '%$search%' OR s.status LIKE '%$search%' OR s.startDate LIKE '%$search%'";
        }
        if (isset($condition['status']) && $condition['status'] != "") {
            if ($condition['status'] == 5) {
                $where .= " AND s.type = 1";
            } elseif ($condition['status'] == 6) {
                $where .= " AND s.type = 2";
            } elseif ($condition['status'] == 7) {
                $where .= " AND u.domain LIKE '%foxmarkets%'";
            } else {
                $where .= " AND s.status = ".$condition['status'];
            }

        }
        if (isset($condition['by'])) {
            $by = $condition['by'];
        }

        $queryBuilder = $this
            ->createQueryBuilder('s')
            ->select('u.clientId as customerId, u.username, s.startDate, s.clientId, s.userId, s.status, s.type, s.data, s.parameters')
            ->leftJoin('FeedifyBaseBundle:Management\Customer', 'u', 'WITH', 's.clientId = u.clientId')
            ->where('u.isActive = :username')
            ->setParameter('username', 1)
            ->andWhere($where)
            ->orderBy('s.startDate', $by)
            ->setFirstResult($condition['offset'])
            ->setMaxResults(20)
            ->getQuery();

        return $queryBuilder->getResult();
    }
}
