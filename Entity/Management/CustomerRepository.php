<?php

namespace Feedify\BaseBundle\Entity\Management;

use Doctrine\DBAL\Connection;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * @method findOneByClientId
 */
class CustomerRepository extends EntityRepository implements UserProviderInterface
{
    /**
     * @param string $username
     * @return mixed|UserInterface
     */
    public function loadUserByUsername($username)
    {
        return $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.roles', 'r')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * @param UserInterface $user
     * @return null|object|UserInterface
     * @throws \Symfony\Component\Security\Core\Exception\UnsupportedUserException
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    /**
     * @param string $class
     * @return bool
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    /**
     * @return mixed
     * @throws \Symfony\Component\Security\Core\Exception\UsernameNotFoundException
     */
    public function getMaxClientId()
    {
        $queryBuilder = $this
            ->createQueryBuilder('u')
            ->orderBy('u.clientId', 'DESC')
            ->setMaxResults(1)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $queryBuilder->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active Customer'
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user->getClientId();
    }

    /**
     * @return mixed
     * @throws \Symfony\Component\Security\Core\Exception\UsernameNotFoundException
     */
    public function getMaxUserName()
    {
        $queryBuilder = $this
            ->createQueryBuilder('u')
            ->orderBy('u.username', 'DESC')
            ->setMaxResults(1)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $queryBuilder->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active Customer'
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user->getUsername();
    }

    /**
     * @param array $userList
     * @return Pagerfanta\Pagerfanta
     */
    public function usersWhoNotExport($userList)
    {
        $queryBuilder = $this
            ->createQueryBuilder('u')
            ->where('u.username IN (:userList)')
            ->setParameter('userList', $userList ?: array(0), Connection::PARAM_INT_ARRAY)
            ->getQuery();

        return new Pagerfanta(new DoctrineORMAdapter($queryBuilder, true, false));
    }
}
