<?php

namespace Feedify\BaseBundle\Entity\Customer;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * ClicksRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClicksRepository extends EntityRepository
{
    /**
     * @return mixed
     */
    public function countClicks()
    {
        $queryBuilder = $this->createQueryBuilder('c')
            ->select('count(c.id) as clicks');

        try {
            $result = $queryBuilder->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = 0;
        }

        return $result;
    }

    /**
     * @param int         $marketId
     * @param bool|string $startDate
     * @param bool|string $endDate
     * @return mixed
     */
    public function countMarketClicks($marketId, $startDate, $endDate)
    {
        $queryBuilder = $this->createQueryBuilder('c')
            ->select('count(c.id) as clicks')
            ->where('c.marketId = :marketId')
            ->setParameter('marketId', $marketId);

        if ($startDate && $endDate) {
            $queryBuilder
                ->andWhere('c.clickDate >= :startDate')
                ->setParameter('startDate', $startDate)
                ->andWhere('c.clickDate <= :endDate')
                ->setParameter('endDate', $endDate);
        }

        try {
            $result = $queryBuilder->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = 0;
        }

        return $result;
    }

    /**
     * Get all clicks by product and markets
     *
     * @param array $productsId
     * @param array $data
     * @return array
     */
    public function countClicksByProductsAndMarkets($productsId, $data)
    {
        $where = '';
        $parameters['productsId'] = $productsId ?: array(0);
        if (!empty($data['startDate']) && !empty($data['endDate'])) {
            $where = ' AND c.clickDate >= :startDate AND c.clickDate <= :endDate';
            $parameters['startDate'] = $data['startDate'];
            $parameters['endDate'] = $data['endDate'];
        }

        if (!empty($data['market'])) {
            $where .= ' AND c.marketId IN (:marketsId)';
            $parameters['marketsId'] = $data['market'];
        }

        $queryBuilder = $this->createQueryBuilder('c')
            ->select('c.productId, c.marketId, COUNT(c.marketId) AS countClicks')
            ->where('c.productId IN (:productsId)'.$where)
            ->setParameters($parameters)
            ->groupBy('c.productId, c.marketId')
            ->getQuery()
            ->getResult();

        $clicks = array();
        foreach ($queryBuilder as $click) {
            $clicks[$click['productId']]['total'] = isset($clicks[$click['productId']]['total'])
                ? $clicks[$click['productId']]['total'] + $click['countClicks']
                : $click['countClicks'];

            if (isset($clicks[$click['productId']][$click['marketId']])) {
                $clicks[$click['productId']][$click['marketId']] += $click['countClicks'];
            } else {
                $clicks[$click['productId']][$click['marketId']] = $click['countClicks'];
            }
        }

        return $clicks;
    }

    /**
     * @param int         $marketId
     * @param bool|string $startDate
     * @param bool|string $endDate
     * @return array
     */
    public function countMarketClicksByDate($marketId, $startDate, $endDate)
    {
        $queryBuilder = $this->createQueryBuilder('c')
            ->select("COUNT(c.id) AS clicks, DATE_FORMAT(c.clickDate, '%Y-%m-%d') AS date")
            ->groupBy('date')
            ->orderBy('date');

        if ($startDate && $endDate) {
            $queryBuilder
                ->where('c.clickDate >= :startDate')
                ->setParameter('startDate', $startDate)
                ->andWhere('c.clickDate <= :endDate')
                ->setParameter('endDate', $endDate);
        }

        if (!empty($marketId)) {
            if ($startDate && $endDate) {
                $queryBuilder->andWhere('c.marketId = :marketId');
            } else {
                $queryBuilder->where('c.marketId = :marketId');
            }

            $queryBuilder->setParameter('marketId', $marketId);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param bool|string $startDate
     * @param bool|string $endDate
     * @return array
     */
    public function countClicksGroupByMarkets($startDate, $endDate)
    {
        $queryBuilder = $this->createQueryBuilder('c')
            ->select('c.marketId, COUNT(c.id) AS countClicks')
            ->groupBy('c.marketId');

        if ($startDate && $endDate) {
            $queryBuilder
                ->where('c.clickDate >= :startDate AND c.clickDate <= :endDate')
                ->setParameter('startDate', $startDate)
                ->setParameter('endDate', $endDate);
        }

        return $queryBuilder->getQuery()->getResult();
    }
}
