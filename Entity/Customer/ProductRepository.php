<?php

namespace Feedify\BaseBundle\Entity\Customer;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\Expr\Join;
use Feedify\BaseBundle\Constant\Customer\Product as ProductConst;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * @method findOneByModelOwn
 */
class ProductRepository extends EntityRepository
{
    /**
     * @param int $old
     * @param int $new
     * @return mixed
     */
    public function updateStatus($old, $new)
    {
        $queryBuilder = $this
            ->createQueryBuilder('p')
            ->update()
            ->set('p.status', '?1')
            ->where('p.status = ?2')
            ->setParameter(1, $new)
            ->setParameter(2, $old)
            ->getQuery();

        return $queryBuilder->execute();
    }

    /**
     * Get all product and their descriptions
     *
     * @param array $productsToMarkets
     * @param int   $offset
     * @param int   $limit
     * @return array
     */
    public function getProductsForExport($productsToMarkets, $offset, $limit)
    {
        $arrayProductsId = array();
        if ($productsToMarkets) {
            /** @var \Feedify\BaseBundle\Entity\Customer\Product\ProductsToMarkets $data */
            foreach ($productsToMarkets as $data) {
                $arrayProductsId[] = $data->getProduct()->getId();
            }
        } else {
            $arrayProductsId = array(0);
        }

        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.status = 1')
            ->andWhere('(p.statusMarket = ?0 OR (p.statusMarket = ?1 AND p.id NOT IN (?2)))')
            ->setParameters(
                array(ProductConst::STATUSMARKET_AVAILABLE, ProductConst::STATUSMARKET_DEFAULT, $arrayProductsId)
            )
            ->orderBy('p.id');

        if ($offset) {
            $queryBuilder->setFirstResult($offset);
        }
        if ($limit) {
            $queryBuilder->setMaxResults($limit);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param array $data
     * @return array
     */
    public function getOptimizationProductsId($data)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p.id')
            ->leftJoin(
                'p.descriptions',
                'pd',
                Join::WITH,
                'pd.lang = :language
                OR pd.lang = (
                    SELECT MIN(pd2.lang)
                    FROM FeedifyBaseBundle:Customer\Product\ProductDescription pd2
                    WHERE pd2.product = p.id
                )'
            );

        if ($data['sort'] === 'countClick' || isset($data['checkClick'])) {
            $queryBuilder->addSelect('COUNT(c.id) AS HIDDEN countClick')
                ->leftJoin('FeedifyBaseBundle:Customer\Clicks', 'c', Join::WITH, 'c.productId = p.id'.$data['withClick']);
        }

        if ($data['sort'] === 'countOrder' || isset($data['checkOrder'])) {
            $queryBuilder->addSelect('COUNT(o.id) AS HIDDEN countOrder')
                ->leftJoin('FeedifyBaseBundle:Customer\OrdersProducts', 'op', Join::WITH, 'op.productId = p.id')
                ->leftJoin('FeedifyBaseBundle:Customer\Orders', 'o', Join::WITH, 'o.id = op.order'.$data['withOrder']);
        }

        if ($data['sort'] === 'orderPrice' || isset($data['checkOrderPrice'])) {
            $queryBuilder->addSelect($data['select'])
                ->leftJoin('FeedifyBaseBundle:Customer\OrdersProducts', 'opo', Join::WITH, 'opo.productId = p.id')
                ->leftJoin('FeedifyBaseBundle:Customer\Orders', 'oo', Join::WITH, 'oo.id = opo.order'.$data['withOrderPrice']);
        }

        if ($data['sort'] === 'conversion' || isset($data['checkConversion'])) {
            $queryBuilder->addSelect(
                'CASE WHEN COUNT(DISTINCT cc.id) > 0 THEN COUNT(DISTINCT oc.id) / COUNT(DISTINCT cc.id) ELSE 0 END AS HIDDEN conversion'
            )
                ->leftJoin('FeedifyBaseBundle:Customer\Clicks', 'cc', Join::WITH, 'cc.productId = p.id'.$data['withConClick'])
                ->leftJoin('FeedifyBaseBundle:Customer\OrdersProducts', 'opc', Join::WITH, 'opc.productId = p.id')
                ->leftJoin('FeedifyBaseBundle:Customer\Orders', 'oc', Join::WITH, 'oc.id = opc.order'.$data['withConOrder']);
        }

        $queryBuilder->where($data['where'])
            ->setParameters($data['parameters'])
            ->groupBy('p.id')
            ->orderBy($data['sort'], $data['order']);

        if (!empty($data['having'])) {
            $queryBuilder->having($data['having']);
        }

        if (!empty($data['firstResult'])) {
            $queryBuilder->setFirstResult($data['firstResult']);
        }

        if (!empty($data['maxResults'])) {
            $queryBuilder->setMaxResults($data['maxResults']);
        }

        $productsId = array();
        foreach ($queryBuilder->getQuery()->getResult() as $product) {
            $productsId[] = $product['id'];
        }

        return $productsId;
    }

    /**
     * Count all product by conditions in {$data}
     *
     * @param array $data
     * @return mixed
     */
    public function countOptimizationProducts($data)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('COUNT(DISTINCT p.id)')
            ->leftJoin(
                'p.descriptions',
                'pd',
                Join::WITH,
                'pd.lang = :language
                OR pd.lang = (
                    SELECT MIN(pd2.lang)
                    FROM FeedifyBaseBundle:Customer\Product\ProductDescription pd2
                    WHERE pd2.product = p.id
                )'
            );

        if (isset($data['checkClick'])) {
            $queryBuilder->addSelect('COUNT(c.id) AS HIDDEN countClick')
                ->leftJoin('FeedifyBaseBundle:Customer\Clicks', 'c', Join::WITH, 'c.productId = p.id'.$data['withClick']);
        }

        if (isset($data['checkOrder'])) {
            $queryBuilder->addSelect('COUNT(o.id) AS HIDDEN countOrder')
                ->leftJoin('FeedifyBaseBundle:Customer\OrdersProducts', 'op', Join::WITH, 'op.productId = p.id')
                ->leftJoin('FeedifyBaseBundle:Customer\Orders', 'o', Join::WITH, 'o.id = op.order'.$data['withOrder']);
        }

        if (isset($data['checkOrderPrice'])) {
            $queryBuilder->addSelect($data['select'])
                ->leftJoin('FeedifyBaseBundle:Customer\OrdersProducts', 'opo', Join::WITH, 'opo.productId = p.id')
                ->leftJoin('FeedifyBaseBundle:Customer\Orders', 'oo', Join::WITH, 'oo.id = opo.order'.$data['withOrderPrice']);
        }

        if (isset($data['checkConversion'])) {
            $queryBuilder->addSelect(
                'CASE WHEN COUNT(DISTINCT cc.id) > 0 THEN COUNT(DISTINCT oc.id) / COUNT(DISTINCT cc.id) ELSE 0 END AS HIDDEN conversion'
            )
                ->leftJoin('FeedifyBaseBundle:Customer\Clicks', 'cc', Join::WITH, 'cc.productId = p.id'.$data['withConClick'])
                ->leftJoin('FeedifyBaseBundle:Customer\OrdersProducts', 'opc', Join::WITH, 'opc.productId = p.id')
                ->leftJoin('FeedifyBaseBundle:Customer\Orders', 'oc', Join::WITH, 'oc.id = opc.order'.$data['withConOrder']);
        }

        $queryBuilder->where($data['where'])
            ->setParameters($data['whereParameters']);

        if (!empty($data['having'])) {
            $queryBuilder->having($data['having']);
        }

        try {
            $result = $queryBuilder->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = 0;
        }

        return $result;
    }

    /**
     * Get data for search form
     *
     * @param string $search1
     * @param string $search2
     * @param int    $languageId
     * @return array
     */
    public function searchProductData($search1, $search2, $languageId)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p.modelOwn, pd.name')
            ->leftJoin(
                'p.descriptions',
                'pd',
                Join::WITH,
                'pd.lang = :language
                    OR pd.lang = (
                        SELECT MIN(pd2.lang)
                        FROM FeedifyBaseBundle:Customer\Product\ProductDescription pd2
                        WHERE pd2.product = p.id
                    )'
            )
            ->setParameter('language', $languageId)
            ->where('p.status = 1')
            ->groupBy('p.id');

        if ($search1 = trim($search1)) {
            $where = '(pd.name LIKE :search1 OR p.modelOwn LIKE :search1';
            $queryBuilder->setParameter('search1', '%'.$search1.'%');
        }

        if ($search2 = trim($search2)) {
            if (isset($where)) {
                $where .= ' OR pd.name LIKE :search2 OR p.modelOwn LIKE :search2)';
            } else {
                $where = '(pd.name LIKE :search2 OR p.modelOwn LIKE :search2)';
            }

            $queryBuilder->setParameter('search2', '%'.$search2.'%');
        } else {
            if (isset($where)) {
                $where .= ')';
            }
        }

        if (isset($where)) {
            $queryBuilder->andWhere($where);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param array $data
     * @param int   $languageId
     * @param bool  $onlyId
     * @return array
     */
    public function getMappingProducts($data, $languageId, $onlyId = false)
    {
        if ($onlyId) {
            $select = 'p.id';
        } else {
            $select = 'p';
        }

        $queryBuilder = $this->createQueryBuilder('p')
            ->select($select)
            ->leftJoin(
                'p.descriptions',
                'pd',
                Join::WITH,
                'pd.lang = :language
                        OR pd.lang = (
                            SELECT MIN(pd2.lang)
                            FROM FeedifyBaseBundle:Customer\Product\ProductDescription pd2
                            WHERE pd2.product = p.id
                        )'
            )
            ->setParameter('language', $languageId)
            ->where('p.status = 1')
            ->groupBy('p.id');

        if (!empty($data['search'])) {
            $queryBuilder
                ->andWhere('(pd.name LIKE :search OR p.modelOwn LIKE :search)')
                ->setParameter('search', '%'.$data['search'].'%');
        }

        if (!empty($data['category'])) {
            $queryBuilder
                ->andWhere('p.category IN (:category)')
                ->setParameter('category', $data['category']);
        }

        if (!empty($data['sort'])) {
            $queryBuilder
                ->orderBy($data['sort'], $data['by']);
        }

        if (!empty($data['firstResult'])) {
            $queryBuilder->setFirstResult($data['firstResult']);
        }

        if (!empty($data['maxResults'])) {
            $queryBuilder->setMaxResults($data['maxResults']);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param array $data
     * @param int   $languageId
     * @return int|mixed
     */
    public function countProductForMapping($data, $languageId)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('count(DISTINCT p.id)')
            ->leftJoin(
                'p.descriptions',
                'pd',
                Join::WITH,
                'pd.lang = :language
                        OR pd.lang = (
                            SELECT MIN(pd2.lang)
                            FROM FeedifyBaseBundle:Customer\Product\ProductDescription pd2
                            WHERE pd2.product = p.id
                        )'
            )
            ->setParameter('language', $languageId)
            ->where('p.status = 1');

        if (!empty($data['search'])) {
            $queryBuilder
                ->andWhere('(pd.name LIKE :search OR p.modelOwn LIKE :search)')
                ->setParameter('search', '%'.$data['search'].'%');
        }

        if (!empty($data['category'])) {
            $queryBuilder
                ->andWhere('p.category IN (:category)')
                ->setParameter('category', $data['category']);
        }

        try {
            $result = $queryBuilder->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = 0;
        }

        return $result;
    }

    /**
     * Get data for search form
     *
     * @param string $search
     * @param int    $languageId
     * @return array
     */
    public function searchProductForMapping($search, $languageId)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p.modelOwn, pd.name')
            ->leftJoin(
                'p.descriptions',
                'pd',
                Join::WITH,
                'pd.lang = :language
                    OR pd.lang = (
                        SELECT MIN(pd2.lang)
                        FROM FeedifyBaseBundle:Customer\Product\ProductDescription pd2
                        WHERE pd2.product = p.id
                    )'
            )
            ->setParameter('language', $languageId)
            ->where('p.status = 1')
            ->groupBy('p.id');

        if ($search) {
            $queryBuilder->andWhere('(pd.name LIKE :search OR p.modelOwn LIKE :search)')
                ->setParameter('search', '%'.$search.'%');
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param array $productsId
     * @return array
     */
    public function getProductsById($productsId)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.id IN (:productsId)')
            ->setParameter('productsId', $productsId)
            ->getQuery()
            ->getResult();
    }

    /**
     * Set Product statusMarket when customer add new Market
     *
     * @param int|bool    $statusMarket
     * @param null|string $productsId
     * @return array
     */
    public function updateProductStatusMarket($statusMarket, $productsId = null)
    {
        $queryBuilder = $this
            ->createQueryBuilder('p')
            ->update()
            ->set('p.statusMarket', ':statusMarket')
            ->setParameter('statusMarket', $statusMarket)
            ->where('p.status = 1');

        if ($productsId) {
            $queryBuilder
                ->andWhere('p.id IN (:productsId)')
                ->setParameter('productsId', $productsId);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @return int|mixed
     */
    public function getProductCount()
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('count(p.id)')
            ->where('p.status = 1')
            ->getQuery();

        try {
            $result = $queryBuilder->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = 0;
        }

        return $result;
    }

    /**
     * @param string|int $modelOwn
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getOrderModelOwn($modelOwn)
    {
        return $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.modelOwn = :modelOwn')
            ->orWhere('p.modelOwn LIKE :productId')
            ->setParameter('modelOwn', $modelOwn)
            ->setParameter('productId', $modelOwn."\_%")
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
