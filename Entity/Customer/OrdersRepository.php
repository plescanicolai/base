<?php

namespace Feedify\BaseBundle\Entity\Customer;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends EntityRepository
{
    /**
     * @return mixed
     */
    public function countOrders()
    {
        $queryBuilder = $this->createQueryBuilder('o')
            ->select('count(o.id) as orders');

        try {
            $result = $queryBuilder->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = 0;
        }

        return $result;
    }

    /**
     * @param int         $marketId
     * @param bool|string $startDate
     * @param bool|string $endDate
     * @return array
     */
    public function countMarketOrdersByDate($marketId, $startDate, $endDate)
    {
        $queryBuilder = $this->createQueryBuilder('o')
            ->select("COUNT(o.id) AS sales, DATE_FORMAT(o.orderDate, '%Y-%m-%d') AS date")
            ->groupBy('date')
            ->orderBy('date');

        if ($startDate && $endDate) {
            $queryBuilder
                ->where('o.orderDate >= :startDate')
                ->setParameter('startDate', $startDate)
                ->andWhere('o.orderDate <= :endDate')
                ->setParameter('endDate', $endDate);
        }

        if (!empty($marketId)) {
            if ($startDate && $endDate) {
                $queryBuilder->andWhere('o.marketId = :marketId');
            } else {
                $queryBuilder->where('o.marketId = :marketId');
            }

            $queryBuilder->setParameter('marketId', $marketId);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param bool|string $startDate
     * @param bool|string $endDate
     * @return array
     */
    public function countOrdersGroupByMarkets($startDate, $endDate)
    {
        $queryBuilder = $this->createQueryBuilder('o')
            ->select('o.marketId, COUNT(o.id) AS countOrders, SUM(o.orderPrice) AS sumSales')
            ->groupBy('o.marketId');

        if ($startDate && $endDate) {
            $queryBuilder
                ->where('o.orderDate >= :startDate AND o.orderDate <= :endDate')
                ->setParameter('startDate', $startDate)
                ->setParameter('endDate', $endDate);
        }

        $orders = array();
        foreach ($queryBuilder->getQuery()->getResult() as $order) {
            $orders[$order['marketId']] = $order;
        }

        return $orders;
    }
}
